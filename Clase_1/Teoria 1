
    """ Paradigma POO """

Que es la programación orientada a objetos?
  Es un paradigma de programación. 
  Paradigma: modelo de diseño y desarrollo de programas
  Otros paradigmas: 
    -> secuenciales  ---- COBOL
    -> procedurales  ---- C
    -> funcionales   ---- Scala - Javascript
    -> objeto        ---- Smalltalk - Python - Java 
    https://docs.python.org/3/

  El paradigma orientado a objetos busca dejar de centrarse en la logica
  para empezar a pensar en los objetos y como interaccionan entre si.
  Este tipo de programación sigue el patron DRY(don't repeat yourself)  


Objeto: 
  Es la instancia de una clase, se compone de:
    -> Estado          ---> datos o propiedades
    -> Comportamiento  ---> tareas o acciones que puede realizar
  
  Definición: Un objeto en POO es la representación de una entidad de la vida real.
              Cada objeto, de igual modo que la entidad de la vida real a la que representa, 
              tiene un estado (es decir, atributos con valores concretos) 
              y un comportamiento (es decir, tiene funcionalidades o sabe hacer 
              acciones concretas).

Clase: 
  Una clase es la descripción de un conjunto de objetos similares. 
  Consta de métodos y datos que resumen las características comunes de dicho conjunto.



Ventajas:
  -> Mediante la modularización y abstracción podemos atacar la problemática de manera gradual
  -> Orden y legibilidad del código 
  -> Escalabilidad capacidad de adaptarse a cambios del sistema

Los objetos se  comunican a travez de mensajes:
  -> unarios           'MAYUSCULAS'.lower()
  -> binarios          3 + 5     
                       4 <= 10
  -> palabra clave     contador.sumar(10)


2 pilares de la POO 
  -> Encapsulación: esta propiedad asegura que el estado interno de un objeto solo puede ser
     modificado por si mismo mediante metodos predefinidos. De esta manera el objeto expondra 
     hacia el exterior solo la información necesaria que desea comunicar. 
      Pensemos en un auto, este le comunica al resto que va realizar un giro, pero no expone 
     sus componentes internos, de esta manera solo provee la información necesaria para poder
     comunicarse con el resto. 
  
  -> Abstracción este principio hace referencia a que la clase debe representar las características
     de la entidad hacia el mundo exterior, pero ocultando la complejidad que lleva aparejada. Es 
     decir abstrae la complejidad, brindando una serie de atributos y metodos que podemos utilizar 
     sin preocuparnos por su implementación, este principio viene de la mano al principio de 
     Encapsulación.


En Python las clases se definen a trasves de la palabra reservada "class" seguido del nombre de la clase
seguidamente se indentan estado y comportamiento de la misma. 

En Python se utiliza "self" para hacer referencia asi mismo.

Veamos un ejemplo en el script contador.py

___________________________________________________________________________________________

Propiedades: 

    Existen tres categorias de propiedades:
      - public: pueden ser accedidas por cualquiera
      - protected: son accedidas por la clase que la define o su decendencia
      - private: son accedidas solo por la clase que la define

    En el caso de no tener de manera publica las propiedades accederemos a ellas mediante 
    el uso de Guetters y Setters
    De esta manera Python utiliza el decorador @property para definir el acceso a dichas propiedades.

    Por ejemplo en el caso de tener una propiedad privada __valor tendriamos el siguiente escenario:

      class Contador():
          __valor = 0 

          @property 
          def valor(self): return self.__valor

          @valor.setter
          def valor(self, un_valor): self.__valor = un_valor

    Para utilizarlo:

      contador = Contador()

      print(contador.valor)    >>> 0

      contador.valor = 5

      print(contador.valor)   >>> 5

    
    Por el contrario si intentamos:

      contador.__valor = 9

      Veremos que la propiedad no fue accedida.


    Veamos el ejemplo en el script calculadora.py

    Los guiones bajo nos permiten darle un nivel de acceso a las propiedades, 
    de igual manera funciona para los metodos de clase.


____________________________________________________________________________________________

Constructores:

    Existe un tiempo entre:
      • La creación de un objeto.
      • La adquisición de los colaboradores que ese objeto necesita
        para llevar adelante sus responsabilidades.
      • Mientras tanto, el objeto está en un estado
        “inconsistente”.
      • ¿Cómo impedimos que esto suceda?
      • Inicializar al objeto con valores por defecto.
      • No permitir la creación de un objeto a menos que nos
        pasen la información mínima indispensable.


    Constructores:
      • Son mensajes de clase relacionados a la construcción
        de objetos bien formados.
      • Podemos crear constructores que tomen como
        parámetros los colaboradores básicos del nuevo
        objeto
      • Así, creamos objetos bien formados.
      • Un objeto bien formado se encuentra en estado consistente
        desde su creación.


    En Python podemos hacer uso del mismo a traves del metodo __init__
    Para entenderlo mejor veamos el script usuario.py